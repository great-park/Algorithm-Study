from sys import stdin
input = stdin.readline
N, M = map(int, input().split())
g = [list(map(int, input().split())) for _ in range(N)]

# 테르로미노
# 일자 - 2개
# t1 = [[0, 1], [0, 1], [0, 1]]
# t1_2 = [[-1, 0], [-1, 0], [-1, 0]]


# # 정사각형 - 1개
# t2 = [[0, 1], [-1, 0], [0, -1]]

# # ㄴ자
# t3 = [[-1, 0], [-1, 0], [0, 1]]
# t3_2 = [[-1, 0], [-1, 0], [0, -1]]
# t3_3 = [[0, 1], [0, 1], [1, 0]]
# t3_4 = [[0, 1], [0, 1], [-1, 0]]
# t3_5 = [[1, 0], [1, 0], [0, -1]]
# t3_6 = [[1, 0], [1, 0], [0, 1]]
# t3_7 = [[0, -1], [0, -1], [1, 0]]
# t3_8 = [[0, -1], [0, -1], [-1, 0]]

# # 풍차
# t4 = [[-1, 0], [0, 1], [-1, 0]]


# t5 = [[0, 1], [-1, 0], [1, 1]]

# T = [t1, t2, t3, t4, t5]
T = [
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],
    [(0, 0), (0, 1), (1, 0), (1, 1)],
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (2, 0)],
    [(1, 0), (1, 1), (0, 1), (0, 2)],
    [(0, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(0, 1), (1, 1), (2, 0), (2, 1)],
    [(0, 0), (0, 1), (1, 0), (2, 0)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(0, 0), (1, 0), (1, 1), (1, 2)],
    [(1, 0), (1, 1), (1, 2), (0, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 0), (1, 0), (1, 1), (2, 0)],
    [(1, 0), (0, 1), (1, 1), (2, 1)]
]
MAX = 0

# 5개가 아니라, 각각을 돌린 모양도 가능 -> 총 19개
for i in range(19):
    nt = T[i]
    for y in range(N):
        for x in range(M):
            success = True
            # ntSum = g[y][x]
            # ny, nx = y, x
            # for ix in range(3):
            #     ny, nx = ny + nt[ix][0], nx + nt[ix][1]
            #     if 0 <= ny < N and 0 <= nx < M:
            #         ntSum += g[ny][nx]
            #     else:  # 해당 테트로미노 불가
            #         success = False
            #         break
            ntSum = 0
            for ix in range(4):
                ny, nx = y + nt[ix][0], x + nt[ix][1]
                if 0 <= ny < N and 0 <= nx < M:
                    ntSum += g[ny][nx]
                else:
                    success = False
                    break

            if success:
                MAX = max(MAX, ntSum)
print(MAX)
